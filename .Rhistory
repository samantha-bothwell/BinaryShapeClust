knitr::opts_chunk$set(
warning = FALSE,
message = FALSE,
collapse = TRUE,
comment = "#>"
)
setwd("D:/CU/Thesis/BinaryShapeClust/BinaryShapeClust")
### Libraries
library(tidyverse)
library(ggplot2)
library(dtwclust) # cluster time series with dynamic time warping
library(dtwclust) # cluster time series with dynamic time warping
library(ecodist) # distance function for jaccard
library(kableExtra)
### Source files
source("Code/01_CleanStudyData.R")
source("Code/02_SimulateClusters.R")
#### Sort by % adherence
source("Code/ClusterHeatmap.R")
ggplot(sim_plot, aes(x = day, y = participant_id, fill = weighed_in)) +
geom_tile() + ggtitle("True Data Clusters and Mean Adherence %") +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_viridis(discrete = TRUE, option="A") +
facet_wrap(~cluster_assignment, scales = "free", ncol = 5)
### Using binary data
jac_dist <- distance(adherence_mat, method = 'jaccard')
dtw_dist <- dist(adherence_mat, method = 'dtw')
euc_dist <- distance(adherence_mat, method = 'euclidean')
### Using continuous data
source("Code/RollAvg.R")
roll_mat = roll_avg(adherence_mat, window = 14) # window size can be adjusted
jac_dist_roll <- distance(roll_mat, method = 'jaccard')
dtw_dist_roll <- dist(roll_mat, method = 'dtw')
euc_dist_roll <- distance(roll_mat, method = 'euclidean')
### Using continuous data
source("Code/RollAvg.R")
roll_mat = roll_avg(adherence_mat, window = 14) # window size can be adjusted
jac_dist_roll <- distance(roll_mat, method = 'jaccard')
dtw_dist_roll <- dist(roll_mat, method = 'dtw')
euc_dist_roll <- distance(roll_mat, method = 'euclidean')
### Method can be specified as 'average', 'single', 'complete', or 'Ward'
### Provide the distance matrix you want to cluster
clust <- hclust(dtw_dist_roll, method = "average")
### Specify the number of clusters
cut <- cutree(clust, k = 5)
### Visualize dendrogram
plot(clust)
rect.hclust(clust, k = 5, border = 2:6)
### Add simulated clustering labels
hclus <- stats::cutree(clust, k = 5) %>%
as.data.frame(.) %>%
dplyr::rename(.,cluster_group = .) %>%
tibble::rownames_to_column("type_col")
hcdata <- ggdendro::dendro_data(clust)
names_order <- hcdata$labels$label
### Plot - plotting the binary data heat map based on the rolling average clustering
data.frame(t(adherence_mat[,-c(1:13)])) %>%
dplyr::mutate(index = 1:352) %>%
dplyr::rename_all(funs(stringr::str_replace_all(., "X", ""))) %>%
tidyr::gather(key = type_col,value = value, -index) %>%
dplyr::full_join(., hclus, by = "type_col") %>%
mutate(type_col = factor(type_col, levels = as.character(names_order)),
weighed_in = factor(value, levels = 0:1, labels = c("no", "yes"))) %>%
ggplot(aes(x = index, y = type_col, fill = weighed_in)) +
geom_tile() +
scale_fill_viridis(discrete = TRUE, option="A") +
facet_wrap(~cluster_group, ncol = 5, scales = "free") +
guides(fill=FALSE) +
theme_bw() + ylab("Subject") +
theme(strip.background = element_blank(), strip.text = element_blank())
#### Source Validation Indices which will calculate validation indices based on user input
source('Code/ValidationIndices.R')
# Rename cluster labels for validation
sim_dat$cluster_label <- ifelse(sim_dat$cluster_label == "low", 1,
ifelse(sim_dat$cluster_label == "dropout", 2,
ifelse(sim_dat$cluster_label == "vacation", 3,
ifelse(sim_dat$cluster_label == "med_adherence", 4, 5))))
# Provide true clusters for external validation
external_validation = validation(cut_matrix = cut, true_clusters = sim_dat$cluster_label)
cut
sim_dat$cluster_label
View(sim_clust)
#### Source Validation Indices which will calculate validation indices based on user input
source('Code/ValidationIndices.R')
# Rename cluster labels for validation
sim_clust$cluster_label <- ifelse(sim_clust$cluster_label == "low", 1,
ifelse(sim_clust$cluster_label == "dropout", 2,
ifelse(sim_clust$cluster_label == "vacation", 3,
ifelse(sim_clust$cluster_label == "med_adherence", 4, 5))))
# Provide true clusters for external validation
external_validation = validation(cut_matrix = cut, true_clusters = sim_dat$cluster_label)
#### Source Validation Indices which will calculate validation indices based on user input
source('Code/ValidationIndices.R')
# Rename cluster labels for validation
sim_clust$cluster_label <- ifelse(sim_clust$cluster_label == "low", 1,
ifelse(sim_clust$cluster_label == "dropout", 2,
ifelse(sim_clust$cluster_label == "vacation", 3,
ifelse(sim_clust$cluster_label == "med_adherence", 4, 5))))
# Provide true clusters for external validation
external_validation = validation(cut_matrix = cut, true_clusters = sim_clust$cluster_label)
# Output table
kable(external_validation) %>%
kable_styling(full_width = F, center = T)
View(external_validation)
#### Source Validation Indices which will calculate validation indices based on user input
source('Code/ValidationIndices.R')
# Rename cluster labels for validation
sim_clust$cluster_label <- ifelse(sim_clust$cluster_label == "low", 1,
ifelse(sim_clust$cluster_label == "dropout", 2,
ifelse(sim_clust$cluster_label == "vacation", 3,
ifelse(sim_clust$cluster_label == "med_adherence", 4, 5))))
# Provide true clusters for external validation
external_validation = validation(cut_matrix = cut, true_clusters = sim_clust$cluster_label)
# Output table
kable(external_validation, center = T) %>%
kable_styling(full_width = F)
# Provide original matrix and distance for internal validation
internal_validation = validation(matrix = roll_mat, distance = dtw_dist_roll, cut_matrix = cut)
# Output table
kable(internal_validation, center = T) %>%
kable_styling(full_width = F)
##################################################################
##   Binary Shape-Based Clustering                              ##
##                                                              ##
## Author : Samantha Bothwell, MS                               ##
## Advisor : Julia Wrobel, PhD                                  ##
##                                                              ##
## Purpose : Simulate Clusters (clusters are unequal size to    ##
##           represent our motivating data)                     ##
##################################################################
### Libraries
library(tidyverse) # data wrangling
### Source MakeClusters function
source("Code/MakeClusters.R")
source("Code/01_CleanStudyData.R")
### Initialize number of days
days = 365
# Quartile clusters
low = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[2]/100, cluster_label = "low")
medium = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[3]/100, cluster_label = "med") %>% mutate(id = id + 20)
high = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[5]/100, cluster_label = "high") %>% mutate(id = id + 40)
### Dropout Cluster
### Randomize the dropout day from a Normal distribution
N = 20
drop_day = ceiling(rnorm(N, mean = 150, sd = 50)) # randomized day of dropout
drop_adherence = c()
for(i in 1:N){
drop_adherence = c(drop_adherence, rbinom(drop_day[i], size = 1, prob = summary(adher$percent_adherence)[3]/100),
rbinom(days - drop_day[i], size = 1, prob = 0.05))
}
dropout =  tibble(
id = rep(1:N, each = days) + 60,
day = rep(1:days, times = N),
adherence = drop_adherence,
cluster_label = "dropout")
### Large strings of no adherence
N = 20
vacation = make_clusters(N = N, days = days, adherence_probability = summary(adher$percent_adherence)[3]/100,
cluster_label = "vacation")[,-4]
zero_days = runif(N, min = 30, max = 300) # find which day the zero string starts
zeros = tibble(
id = 1:N,
length = ceiling(runif(N, min = 30, max = 90)), # specify length of each string of zeros
day = ceiling(zero_days)
)
zeros <- zeros %>% group_by(id) %>% complete(day = seq(day, day + length, by = 1))
zeros <- zeros[zeros$day <= 400,]; zeros <- zeros[!duplicated(zeros[,c(1,2)]),]
zeros$adherence = 0
vacation = left_join(vacation, zeros, by = c("id", "day")) %>%
mutate(adherence = ifelse(!is.na(adherence.y), adherence.y, adherence.x)) %>%
select(id, day, adherence) %>%
mutate(cluster_label = "vacation", id = id + 80)
# Combine data
sim_dat = rbind(low, medium, high, dropout, vacation)
# Mutate simulation data
sim_plot = sim_dat %>%
mutate(id = paste0(cluster_label, "_", id)) %>% # Add cluster label to id
group_by(id) %>%
mutate(percent_adherence = sum(adherence)/365 * 100) %>% # Calculate % adherence
ungroup() %>% group_by(cluster_label) %>%
mutate(mean.adherence = paste0(round(mean(percent_adherence), 1), "%")) %>%
ungroup() %>%
mutate(weighed_in = factor(adherence, levels = 0:1, labels = c("no", "yes")),
participant_id = fct_reorder(id, percent_adherence),
cluster_assignment = paste0("cluster_", cluster_label, " \n Mean Adherence = ", mean.adherence))
sim_clust = sim_dat %>%
group_by(id) %>%
mutate(percent_adherence = sum(adherence)/400 * 100) %>%
ungroup() %>%
dplyr::select(id, percent_adherence, cluster_label, day, adherence) %>%
mutate(day = paste0("day_", day)) %>%
distinct() %>%
pivot_wider(names_from = day, values_from = adherence)
adherence_mat = as.matrix(sim_clust[,-c(1:3)])
rownames(adherence_mat) <- sim_clust$id
### Libraries
library(tidyverse) # data wrangling
### Source MakeClusters function
source("Code/MakeClusters.R")
source("Code/01_CleanStudyData.R")
### Initialize number of days
days = 365
# Quartile clusters
low = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[2]/100, cluster_label = "low")
medium = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[3]/100, cluster_label = "med") %>% mutate(id = id + 20)
high = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[5]/100, cluster_label = "high") %>% mutate(id = id + 40)
### Dropout Cluster
### Randomize the dropout day from a Normal distribution
N = 20
drop_day = ceiling(rnorm(N, mean = 150, sd = 50)) # randomized day of dropout
drop_adherence = c()
for(i in 1:N){
drop_adherence = c(drop_adherence, rbinom(drop_day[i], size = 1, prob = summary(adher$percent_adherence)[3]/100),
rbinom(days - drop_day[i], size = 1, prob = 0.05))
}
dropout =  tibble(
id = rep(1:N, each = days) + 60,
day = rep(1:days, times = N),
adherence = drop_adherence,
cluster_label = "dropout")
### Large strings of no adherence
N = 20
vacation = make_clusters(N = N, days = days, adherence_probability = summary(adher$percent_adherence)[3]/100,
cluster_label = "vacation")[,-4]
zero_days = runif(N, min = 30, max = 300) # find which day the zero string starts
zeros = tibble(
id = 1:N,
length = ceiling(runif(N, min = 30, max = 90)), # specify length of each string of zeros
day = ceiling(zero_days)
)
zeros <- zeros %>% group_by(id) %>% complete(day = seq(day, day + length, by = 1))
zeros <- zeros[zeros$day <= 400,]; zeros <- zeros[!duplicated(zeros[,c(1,2)]),]
zeros$adherence = 0
vacation = left_join(vacation, zeros, by = c("id", "day")) %>%
mutate(adherence = ifelse(!is.na(adherence.y), adherence.y, adherence.x)) %>%
select(id, day, adherence) %>%
mutate(cluster_label = "vacation", id = id + 80)
vacation = left_join(vacation, zeros, by = c("id", "day")) %>%
mutate(adherence = ifelse(!is.na(adherence.y), adherence.y, adherence.x)) %>%
dplyr::select(id, day, adherence) %>%
mutate(cluster_label = "vacation", id = id + 80)
# Combine data
sim_dat = rbind(low, medium, high, dropout, vacation)
# Mutate simulation data
sim_plot = sim_dat %>%
mutate(id = paste0(cluster_label, "_", id)) %>% # Add cluster label to id
group_by(id) %>%
mutate(percent_adherence = sum(adherence)/365 * 100) %>% # Calculate % adherence
ungroup() %>% group_by(cluster_label) %>%
mutate(mean.adherence = paste0(round(mean(percent_adherence), 1), "%")) %>%
ungroup() %>%
mutate(weighed_in = factor(adherence, levels = 0:1, labels = c("no", "yes")),
participant_id = fct_reorder(id, percent_adherence),
cluster_assignment = paste0("cluster_", cluster_label, " \n Mean Adherence = ", mean.adherence))
sim_clust = sim_dat %>%
group_by(id) %>%
mutate(percent_adherence = sum(adherence)/400 * 100) %>%
ungroup() %>%
dplyr::select(id, percent_adherence, cluster_label, day, adherence) %>%
mutate(day = paste0("day_", day)) %>%
distinct() %>%
pivot_wider(names_from = day, values_from = adherence)
adherence_mat = as.matrix(sim_clust[,-c(1:3)])
rownames(adherence_mat) <- sim_clust$id
##################################################################
##   Binary Shape-Based Clustering                              ##
##                                                              ##
## Author : Samantha Bothwell, MS                               ##
## Advisor : Julia Wrobel, PhD                                  ##
##                                                              ##
## Purpose : Simulate Clusters (clusters are unequal size to    ##
##           represent our motivating data)                     ##
##################################################################
### Libraries
library(tidyverse) # data wrangling
### Source MakeClusters function
source("Code/MakeClusters.R")
source("Code/01_CleanStudyData.R")
### Initialize number of days
days = 365
# Quartile clusters
low = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[2]/100, cluster_label = "low")
medium = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[3]/100, cluster_label = "med") %>% mutate(id = id + 20)
high = make_clusters(N = 20, days = days, adherence_probability = summary(adher$percent_adherence)[5]/100, cluster_label = "high") %>% mutate(id = id + 40)
### Dropout Cluster
### Randomize the dropout day from a Normal distribution
N = 20
drop_day = ceiling(rnorm(N, mean = 150, sd = 50)) # randomized day of dropout
drop_adherence = c()
for(i in 1:N){
drop_adherence = c(drop_adherence, rbinom(drop_day[i], size = 1, prob = summary(adher$percent_adherence)[3]/100),
rbinom(days - drop_day[i], size = 1, prob = 0.05))
}
dropout =  tibble(
id = rep(1:N, each = days) + 60,
day = rep(1:days, times = N),
adherence = drop_adherence,
cluster_label = "dropout")
### Large strings of no adherence
N = 20
vacation = make_clusters(N = N, days = days, adherence_probability = summary(adher$percent_adherence)[3]/100,
cluster_label = "vacation")[,-4]
zero_days = runif(N, min = 30, max = 300) # find which day the zero string starts
zeros = tibble(
id = 1:N,
length = ceiling(runif(N, min = 30, max = 90)), # specify length of each string of zeros
day = ceiling(zero_days)
)
zeros <- zeros %>% group_by(id) %>% complete(day = seq(day, day + length, by = 1))
zeros <- zeros[zeros$day <= 400,]; zeros <- zeros[!duplicated(zeros[,c(1,2)]),]
zeros$adherence = 0
vacation = left_join(vacation, zeros, by = c("id", "day")) %>%
mutate(adherence = ifelse(!is.na(adherence.y), adherence.y, adherence.x)) %>%
dplyr::select(id, day, adherence) %>%
mutate(cluster_label = "vacation", id = id + 80)
# Combine data
sim_dat = rbind(low, medium, high, dropout, vacation)
# Mutate simulation data
sim_plot = sim_dat %>%
mutate(id = paste0(cluster_label, "_", id)) %>% # Add cluster label to id
group_by(id) %>%
mutate(percent_adherence = sum(adherence)/365 * 100) %>% # Calculate % adherence
ungroup() %>% group_by(cluster_label) %>%
mutate(mean.adherence = paste0(round(mean(percent_adherence), 1), "%")) %>%
ungroup() %>%
mutate(weighed_in = factor(adherence, levels = 0:1, labels = c("no", "yes")),
participant_id = fct_reorder(id, percent_adherence),
cluster_assignment = paste0("cluster_", cluster_label, " \n Mean Adherence = ", mean.adherence))
sim_clust = sim_dat %>%
group_by(id) %>%
mutate(percent_adherence = sum(adherence)/400 * 100) %>%
ungroup() %>%
dplyr::select(id, percent_adherence, cluster_label, day, adherence) %>%
mutate(day = paste0("day_", day)) %>%
distinct() %>%
pivot_wider(names_from = day, values_from = adherence)
adherence_mat = as.matrix(sim_clust[,-c(1:3)])
rownames(adherence_mat) <- sim_clust$id
write.csv(sim_clust, "D:/CU/Thesis/BinaryShapeClust/BinaryShapeClust/Data/DataSimulated/simulated_example.csv")
